// Code generated by go-bindata.
// sources:
// assets/lets-encrypt-x1-cross-signed.pem
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsLetsEncryptX1CrossSignedPem = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x55\x4b\xb3\x82\x3a\x1a\xdc\xf3\x2b\x66\x6f\x4d\x09\x08\x2a\x8b\x59\x24\x24\xbc\x24\x70\x82\xa0\xc2\x8e\x87\xc2\xe1\xed\x41\x0c\xf0\xeb\x87\xe3\x4c\xdd\x5b\x73\xef\xb0\x82\x2f\xf9\x8a\xee\x4e\x77\xbe\x7f\xfe\x3e\x10\xeb\xa6\xf3\x0f\x15\x7b\xbe\xa9\x99\x2a\xf0\xf1\xa7\xca\x11\xd3\xc4\x4f\xa4\xaa\x40\x56\x73\xc0\x4c\x08\x72\xd3\x03\x56\xee\x2b\x46\xe0\xcb\xb7\xc0\xa6\x9b\x0c\x19\x7d\x7a\xf7\x6c\x9e\x21\x1a\x5a\xa7\x2e\x32\x8b\x77\xea\x00\x8a\x6d\x48\x01\xe3\xbe\x16\x5c\x11\xd5\xd4\x81\x10\x60\xb5\x20\x89\xa7\xd7\x6d\x7c\xf3\x8a\x44\x85\x7e\x7c\xcd\xc6\xf0\xe6\x09\x69\x13\xe4\x17\xc3\x12\xd2\x1d\xcd\xa9\x78\x1c\x89\x97\x32\x8d\x86\xe8\x42\x29\xe2\x30\x93\x71\x20\xd0\x3c\x68\x94\x77\xa6\x42\x44\xcf\x30\x24\x0b\xb8\x6b\x8c\x9f\x1c\x1f\x33\xe2\x57\x33\x29\xc9\x42\x96\x28\x5e\x6b\x33\x41\xff\x5b\xe3\x08\xee\x26\x75\x01\x16\xcc\x9d\x0b\x04\xa1\x0f\xea\x8b\x4f\xbc\x90\x69\xe0\xf3\x87\x13\x66\x02\x89\x6e\xb4\x4d\x67\xa8\x25\x8d\x33\xdf\x6f\x90\x27\x67\xc2\xcc\x3f\x10\x4c\xfd\xdf\x36\x98\x58\x13\x32\x7d\x65\xda\xd4\xfc\xfd\x17\x91\xbf\x6a\x74\x36\xff\xaa\x01\x5c\x35\x40\x5c\x9e\xe3\x2f\xf0\x2b\x22\xed\xd4\xf5\x1d\x02\x6b\xf1\xd1\x17\x8c\xe5\xb3\x6c\xbc\x76\x56\xe6\x48\xee\x12\xeb\x84\xed\x5f\xa9\x60\x15\x55\x2d\x25\xe2\xc6\x79\x68\xac\xfa\xde\xec\x46\xfc\x82\x1c\x8c\xc7\xbe\x2d\x03\xf3\xea\xce\xd3\x69\xf0\xba\x82\x8d\xa5\xb4\xbb\x55\xf2\xdb\x6d\xc3\x56\xdf\xdf\x43\x2d\x37\x94\xbb\xd7\xf4\xdb\x85\x37\x8a\x36\x4d\x8b\x1e\xf5\x57\x6f\xd9\x1e\x9a\xe6\x5e\xe7\xdc\x17\x2e\xc9\x63\xe8\x9d\x6c\x32\xab\x36\x48\x93\xeb\x38\xca\x07\x28\xed\x00\x9c\xd3\x1f\x63\x6c\xe1\xfd\xc7\x3d\x8f\xa3\x42\xef\x81\xd8\xd8\xad\xbd\xbd\xf2\xc7\xba\x29\x1f\xe6\xdc\xab\x15\x98\x75\x2e\xd3\x1f\xe6\x63\x7f\x8d\x47\xcd\x2a\x34\x48\xb6\xd1\xbd\x51\x8b\xe3\x3b\xd9\xe4\xf2\x55\xe9\x62\xeb\x28\x05\xdb\x5a\x8a\xdf\x83\xc3\xe2\x83\x38\x38\xb5\x17\x29\x93\x3a\xe6\x51\x72\x8a\x20\x8a\x04\x2e\xd7\xc7\xe1\xfc\x26\x49\x85\x6b\xc9\xde\x9f\xae\xfe\xdc\xe5\xd6\xb9\xc2\x53\xeb\x03\x1e\x19\x4e\xb9\x60\xa9\xf6\xe2\xfd\x13\xb9\x12\xdd\xea\x93\x71\x24\xec\xb1\xb7\x64\xe2\x11\xc5\xf6\x13\x89\x93\xb6\xcb\x4c\xc4\xa7\xec\xfa\x86\xf6\x73\x3c\x3b\xc8\x13\x2a\xad\x74\x9f\x9b\x8e\xf6\xaf\x17\xb5\x99\x53\x28\x4c\x26\x2a\x60\x18\x80\xd8\x55\x41\x64\xb2\x3c\xd7\x5d\x02\x3f\xe6\xcb\x56\x23\x61\xb8\x65\xd4\x24\x20\x84\xe0\x71\x5c\x4f\x03\x30\x94\xaf\x67\xec\xf1\x5f\x80\x1a\x5b\x08\x28\x02\xb9\xae\x13\xe3\xa8\xab\xea\xa0\x03\x1a\x68\x70\xed\x81\x06\x61\xa9\x0f\x66\x0e\xe6\xf9\x0f\xcc\xb1\x06\x69\xca\x40\x18\x36\xb1\xe1\xf1\x29\xea\xde\xb6\x58\x2f\x69\x93\x8e\xd9\xc7\xc2\x5e\x1f\xa9\xf2\x3b\xdc\x39\xcc\x6e\xea\x2a\xba\xca\x7c\xda\x5e\x96\x4c\x95\x4b\x2e\x11\x79\xe6\xb2\xd0\x3c\xb1\x70\x35\x46\x60\x10\x70\xd2\x6d\xb1\xe0\x33\x03\xec\xed\x59\x29\x52\x03\x2e\x7f\x6d\x5a\x7b\x56\x93\xad\xd6\x37\xc8\x9b\x8b\x0c\x87\xff\x7c\xe8\x4e\x71\x47\x64\x4c\x51\x56\x12\x78\xfc\xf0\x33\x19\x0d\x09\x8c\x81\x46\xce\xed\x10\x7b\x07\xdb\x30\xf6\xe2\x46\xb3\x2b\xe3\xb6\x9d\xe0\x25\x2f\xc2\x8a\x72\x44\xa3\xff\xd9\x0c\x3c\x87\xe0\x81\xa9\x20\xd4\x23\x09\x13\x40\x4d\x48\xd0\xca\x7b\xfe\xe5\x4d\x61\xfe\x3a\xfa\xbf\xf6\x25\x08\x30\x3b\xff\x13\x31\x07\x72\x7c\x35\x9b\x3f\x20\x97\xa9\xb1\xa2\xf8\x24\x53\x90\xc8\x59\x1e\xa2\x9b\xb7\xac\xf0\xcb\xb4\xad\xd9\x0a\x7f\x85\x9e\xb2\x2f\xf0\x11\xf9\x01\x51\xc0\xb8\x35\xba\x53\xa7\x6e\x72\x3b\x0c\x7f\xfe\x14\xd0\x99\x13\x55\xee\x23\xfd\xf2\x5f\x11\xe9\x18\x8a\xca\xcb\xe6\x3d\xff\xa2\x59\x5f\xbe\xe0\x21\x7a\xc9\x17\x2a\x58\x84\xb3\xd7\x04\x26\x08\xf8\xbf\x71\x36\x3c\x09\x23\x04\x4e\x1d\xcd\x19\xec\x4c\x6c\x37\x42\xbf\xae\x65\x9f\x35\x2a\x61\x2d\xa7\xc1\x13\xf7\xcf\x90\x79\xca\x2e\xf9\x69\x78\xbf\xd9\x71\x7d\x75\xa9\x0f\x5b\xb7\x3b\xac\xc9\xff\x3f\x57\x16\xfa\x24\xd4\x31\x4c\xb3\x1a\x87\xc3\x86\x58\xdf\x51\x44\x87\x50\x90\x52\xb5\x83\xba\x50\x64\xdc\x9b\xb7\x44\x7e\xab\xcd\xd7\x4e\xee\xfb\xf6\x51\xda\x87\xe3\x59\xac\xa4\x41\xd4\x6d\xcf\x3a\x7c\x23\x25\x42\x27\xfc\xd3\x66\xef\xc4\xd1\xf4\x74\xb8\x6e\x94\xea\x74\xda\xfa\x6d\x28\x0a\x45\x2f\xa1\x8c\x33\xfd\xf7\xf1\xac\x44\x21\x3d\x74\x71\xf7\x1c\x0e\x06\x2b\x30\x09\x95\xe1\x3b\xc1\x48\x8a\x6f\x8c\x57\xa6\x1f\x2b\xf2\x55\x65\x39\x09\xa3\xf9\xb8\xee\x5f\x72\x66\xd0\x72\x74\xaf\xef\x8d\x61\x74\x57\x2e\x6a\xc7\x7e\x9e\xfa\x01\x07\x35\x8e\xb5\x64\xb3\x3d\xab\xa6\x74\x52\xcf\x30\x03\x43\x38\x81\x74\x30\x42\x53\x9e\x26\x6c\x4a\xf6\xf8\x32\xfa\xfd\xb0\x73\x7d\x51\x1b\x5d\x85\xbf\x3e\xb2\xc1\xac\xb8\xfd\xf3\x70\x74\xc9\x39\x6b\x8f\x07\x39\x71\xca\x0c\x86\xe0\x39\x05\xbd\xb8\xb5\xb1\x69\x3c\x10\xac\xec\x8e\x2e\x7c\xa1\x59\x0d\x03\x49\x18\x17\xcf\x53\x6c\xb7\x87\xdd\x17\x00\x8d\x70\x13\xab\x92\x7b\x08\xec\x88\xb2\xb6\x8a\x13\xd7\xd6\xef\xee\x25\x2d\x95\x75\x16\x0c\xfb\xc3\x1b\xce\xd5\x24\xc5\xad\x5f\x06\x5e\x95\x3c\xa3\xa1\x0e\x70\x30\xb4\x62\x25\x4f\xf7\x31\x16\x97\xa0\xfa\x17\xf7\x19\x2d\xd8\x41\x7f\x1f\x37\xff\x0e\x00\x00\xff\xff\x9e\xa1\x94\x32\x8b\x06\x00\x00")

func assetsLetsEncryptX1CrossSignedPemBytes() ([]byte, error) {
	return bindataRead(
		_assetsLetsEncryptX1CrossSignedPem,
		"assets/lets-encrypt-x1-cross-signed.pem",
	)
}

func assetsLetsEncryptX1CrossSignedPem() (*asset, error) {
	bytes, err := assetsLetsEncryptX1CrossSignedPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/lets-encrypt-x1-cross-signed.pem", size: 1675, mode: os.FileMode(420), modTime: time.Unix(1450725844, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/lets-encrypt-x1-cross-signed.pem": assetsLetsEncryptX1CrossSignedPem,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"lets-encrypt-x1-cross-signed.pem": &bintree{assetsLetsEncryptX1CrossSignedPem, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

